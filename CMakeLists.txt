
cmake_minimum_required (VERSION 2.8)


# set a default build type if none was provided
# this has to be done before the project() instruction!
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build (Debug or Release)" FORCE)
endif()

project (sfeMovie)

# Import required CMake files
set (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/Modules")
include(RunShellCommand.cmake)

# Detect the OS
if(${CMAKE_HOST_WIN32})
    set(WINDOWS 1)
elseif(${CMAKE_HOST_APPLE})
    set(MACOSX 1)
elseif(${CMAKE_HOST_UNIX})
    set(LINUX 1)
else()
    message(FATAL_ERROR "Unsupported operating system")
    return()
endif()

set (BUILD_WITH_PROVIDED_FFMPEG TRUE CACHE BOOL "TRUE to build sfeMovie with the provided FFmpeg libraries, FALSE to build with the system libraries")
set (BUILD_SFEMOVIE_SAMPLE FALSE CACHE BOOL "TRUE to build the sfeMovie sample")

# Set some env vars
set (LIB_NAME sfeMovie)
set (VERSION_MAJOR 1)
set (VERSION_MINOR 0)
set (VERSION_PATCH 1)
set (COMPILER_FLAGS "")
set (LINKER_FLAGS "")

set (SOURCES_DIR "src")
set (PUBLIC_HEADERS "include")
set (PRIVATE_HEADERS "src")
set (OTHER_LIBRARIES "")

if ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
	add_definitions("-O2")
endif()
	
if (BUILD_WITH_PROVIDED_FFMPEG)
    set (PRIVATE_HEADERS ${PRIVATE_HEADERS} "deps/headers")
    set (FFMPEG_LIBRARIES avdevice avformat avcodec avutil swscale)
    set (EXTERNAL_LIBRARIES_DIR ${CMAKE_SOURCE_DIR}/deps/ffmpeg-build)
endif()

set (SOURCE_FILES ${SOURCES_DIR}/Movie.cpp ${SOURCES_DIR}/Movie_audio.cpp ${SOURCES_DIR}/Movie_video.cpp ${SOURCES_DIR}/utils.cpp ${SOURCES_DIR}/Condition.cpp)

find_package (SFML 2 COMPONENTS graphics window system audio REQUIRED)
set(SFML_LIBRARIES ${SFML_GRAPHICS_LIBRARY} ${SFML_WINDOW_LIBRARY} ${SFML_AUDIO_LIBRARY} ${SFML_SYSTEM_LIBRARY})


if (LINUX) # ========================================== LINUX ========================================== #

    if (NOT ${BUILD_WITH_PROVIDED_FFMPEG})
        find_package (FFMPEG REQUIRED)
	endif()
	
    add_definitions(-D__STDC_CONSTANT_MACROS)
	set (SOURCE_FILES ${SOURCE_FILES} "${SOURCES_DIR}/Unix/ConditionImpl.cpp")

elseif (MACOSX) # ========================================== MACOSX ========================================== #
	
	if (HAS_VDA)
		set (OTHER_LIBRARIES ${OTHER_LIBRARIES} z bz2 "-framework VideoDecodeAcceleration" "-framework CoreVideo")
	else()
		# In case VDA isn't defined (ie. build.sh is using the current OS SDK), check the current OS version
		if (DEFINED HAS_VDA) # HAS_VDA defined but FALSE
			set (OTHER_LIBRARIES ${OTHER_LIBRARIES} z bz2)
		else()
			# VDA is used for OS X 10.7 and later
			if (${CMAKE_HOST_SYSTEM_VERSION} VERSION_EQUAL "11.0.0" OR ${CMAKE_HOST_SYSTEM_VERSION} VERSION_GREATER "11.0.0")
				set (OTHER_LIBRARIES ${OTHER_LIBRARIES} z bz2 "-framework VideoDecodeAcceleration" "-framework CoreVideo")
			endif()
		endif()
	endif()
	
	set (SOURCE_FILES ${SOURCE_FILES} "${SOURCES_DIR}/Unix/ConditionImpl.cpp")
	set (CMAKE_OSX_ARCHITECTURES "x86_64")
    
    # add an option to let the user specify a custom directory for framework installation
    set(CMAKE_INSTALL_FRAMEWORK_PREFIX "/Library/Frameworks" CACHE STRING "Frameworks installation directory")
	
	# find only "root" headers
    file(GLOB SFE_HEADERS RELATIVE ${PROJECT_SOURCE_DIR} "include/sfeMovie/*")
    
    # Make sure sfeMovie headers get imported in the framework
    set (SOURCE_FILES ${SOURCE_FILES} ${SFE_HEADERS})
	
	
elseif (WINDOWS) # ========================================== WINDOWS ========================================== #

	set (EXTERNAL_LIBRARIES_DIR ${EXTERNAL_LIBRARIES_DIR} "${CMAKE_SOURCE_DIR}/deps/windows-binaries")
	
	if (MSVC)
		set (PRIVATE_HEADERS ${PRIVATE_HEADERS} "${CMAKE_SOURCE_DIR}/deps/headers/msvc")
	else()
		set (EXTERNAL_LIBRARIES_DIR ${EXTERNAL_LIBRARIES_DIR} "${CMAKE_SOURCE_DIR}/deps/windows-binaries/gcc")
		set (LINKER_FLAGS ${LINKER_FLAGS} "-static-libgcc")
		set (OTHER_LIBRARIES ${OTHER_LIBRARIES} "z")
	endif()
	
	add_definitions(-D__STDC_CONSTANT_MACROS -DSFE_EXPORTS)
	set (OTHER_LIBRARIES ${OTHER_LIBRARIES} "ws2_32")
	set (SOURCE_FILES ${SOURCE_FILES} "${SOURCES_DIR}/Win32/ConditionImpl.cpp")
endif()



if (${BUILD_WITH_PROVIDED_FFMPEG})
    include_directories (${SFML_INCLUDE_DIR} ${PUBLIC_HEADERS} ${PRIVATE_HEADERS})
    link_directories (${FFMPEG_LIBRARY_DIR})
else ()
    # Set the search directories for compiling and link editing
    include_directories (${SFML_INCLUDE_DIR} ${PUBLIC_HEADERS} ${PRIVATE_HEADERS} ${FFMPEG_INCLUDE_DIR})
    link_directories (${EXTERNAL_LIBRARIES_DIR})
endif ()

# Define the source files sfe should compile
add_library (${LIB_NAME} SHARED ${SOURCE_FILES})


set_target_properties(${LIB_NAME} PROPERTIES
					  COMPILE_FLAGS "${COMPILER_FLAGS}"
					  LINK_FLAGS "${LINKER_FLAGS}"
					  SOVERSION "${VERSION_MAJOR}.${VERSION_MINOR}.0"
                      VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")


if (LINUX)
	install(DIRECTORY include/sfeMovie
            DESTINATION ${CMAKE_INSTALL_PREFIX}/include
            COMPONENT devel)
    		
    install(TARGETS ${LIB_NAME}
            LIBRARY DESTINATION lib)
   	
   	file(GLOB FFMPEG_BUILD_LIBS RELATIVE ${PROJECT_SOURCE_DIR} "deps/ffmpeg-build/*")
    install(FILES ${FFMPEG_BUILD_LIBS}
            DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
            COMPONENT devel)
elseif (MACOSX)
    # edit target properties
    set_target_properties(${LIB_NAME} PROPERTIES 
                          FRAMEWORK TRUE
                          FRAMEWORK_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}
                          MACOSX_FRAMEWORK_IDENTIFIER org.yalir.${LIB_NAME}
                          MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}
                          MACOSX_FRAMEWORK_BUNDLE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}
                          PUBLIC_HEADER ${SFE_HEADERS} )


    # adapt install directory to allow distributing dylibs/frameworks in userâ€™s frameworks/application bundle
    set_target_properties(${LIB_NAME} PROPERTIES 
                          BUILD_WITH_INSTALL_RPATH 1 
                          INSTALL_NAME_DIR "@executable_path/../Frameworks")
    
    install(TARGETS ${LIB_NAME}
            FRAMEWORK DESTINATION ${CMAKE_INSTALL_FRAMEWORK_PREFIX}
            COMPONENT devel)
endif()

# Copy include directory to install location
install(
	DIRECTORY include
	DESTINATION .
)


# Define the libraries sfe should link against
target_link_libraries (${LIB_NAME} ${SFML_LIBRARIES} ${FFMPEG_LIBRARIES} ${OTHER_LIBRARIES})

# Build FFmpeg if needed
if (BUILD_WITH_PROVIDED_FFMPEG)
	if (MSVC)
		set( MINGW_DIR C:/MinGW CACHE PATH "Set the path for the MinGW environment")
		if (EXISTS "${MINGW_DIR}" AND IS_DIRECTORY "${MINGW_DIR}")
			if (EXISTS "${MINGW_DIR}/bin" AND IS_DIRECTORY "${MINGW_DIR}/bin")
				if (NOT EXISTS "${MINGW_DIR}/msys/1.0/bin" OR NOT IS_DIRECTORY "${MINGW_DIR}/msys/1.0/bin")
					message(FATAL_ERROR "The specified MINGW_DIR does not contain MSYS")
				endif()
			else()
				message(FATAL_ERROR "The specified MINGW_DIR is not a MinGW directory")
			endif()
		else()
			message(FATAL_ERROR "The specified MINGW_DIR is not a valid path to a directory")
		endif()
	endif()

	set( Decoders_you_can_enable aac aac_latm aasc ac3 adpcm_4xm adpcm_adx adpcm_afc adpcm_ct adpcm_ea adpcm_ea_maxis_xa adpcm_ea_r1 adpcm_ea_r2 adpcm_ea_r3 adpcm_ea_xas adpcm_g722 adpcm_g726 adpcm_ima_amv adpcm_ima_apc adpcm_ima_dk3 adpcm_ima_dk4 adpcm_ima_ea_eacs adpcm_ima_ea_sead adpcm_ima_iss adpcm_ima_oki adpcm_ima_qt adpcm_ima_smjpeg adpcm_ima_wav adpcm_ima_ws adpcm_ms adpcm_sbpro_2 adpcm_sbpro_3 adpcm_sbpro_4 adpcm_swf adpcm_thp adpcm_xa adpcm_yamaha alac als amrnb amrwb amv anm ansi ape ass asv1 asv2 atrac1 atrac3 aura aura2 avrn avrp avs avui ayuv bethsoftvid bfi bink binkaudio_dct binkaudio_rdft bintext bmp bmv_audio bmv_video brender_pix c93 cavs cdgraphics cdxl cinepak cljr cllc comfortnoise cook cpia cscd cyuv dca dfa dirac dnxhd dpx dsicinaudio dsicinvideo dvbsub dvdsub dvvideo dxa dxtory eac3 eacmv eamad eatgq eatgv eatqi eightbps eightsvx_exp eightsvx_fib escape124 escape130 exr ffv1 ffvhuff ffwavesynth flac flashsv flashsv2 flic flv fourxm fraps frwu g723_1 g729 gif gsm gsm_ms h261 h263 h263i h263p h264 h264_crystalhd h264_vda h264_vdpau huffyuv iac idcin idf iff_byterun1 iff_ilbm imc indeo2 indeo3 indeo4 indeo5 interplay_dpcm interplay_video jacosub jpeg2000 jpegls jv kgv1 kmvc lagarith libcelt libgsm libgsm_ms libilbc libopencore_amrnb libopencore_amrwb libopenjpeg libopus libschroedinger libspeex libstagefright_h264 libutvideo libvorbis libvpx loco mace3 mace6 mdec microdvd mimic mjpeg mjpegb mlp mmvideo motionpixels movtext mp1 mp1float mp2 mp2float mp3 mp3adu mp3adufloat mp3float mp3on4 mp3on4float mpc7 mpc8 mpeg1_vdpau mpeg1video mpeg2_crystalhd mpeg2video mpeg4 mpeg4_crystalhd mpeg4_vdpau mpeg_vdpau mpeg_xvmc mpegvideo mpl2 msa1 msmpeg4_crystalhd msmpeg4v1 msmpeg4v2 msmpeg4v3 msrle mss1 mss2 msvideo1 mszh mts2 mvc1 mvc2 mxpeg nellymoser nuv paf_audio paf_video pam pbm pcm_alaw pcm_bluray pcm_dvd pcm_f32be pcm_f32le pcm_f64be pcm_f64le pcm_lxf pcm_mulaw pcm_s16be pcm_s16be_planar pcm_s16le pcm_s16le_planar pcm_s24be pcm_s24daud pcm_s24le pcm_s24le_planar pcm_s32be pcm_s32le pcm_s32le_planar pcm_s8 pcm_s8_planar pcm_u16be pcm_u16le pcm_u24be pcm_u24le pcm_u32be pcm_u32le pcm_u8 pcm_zork pcx pgm pgmyuv pgssub pictor pjs png ppm prores prores_lgpl ptx qcelp qdm2 qdraw qpeg qtrle r10k r210 ra_144 ra_288 ralf rawvideo realtext rl2 roq roq_dpcm rpza rv10 rv20 rv30 rv40 s302m sami sanm sgi sgirle shorten sipr smackaud smacker smc snow sol_dpcm sonic sp5x srt subrip subviewer subviewer1 sunrast svq1 svq3 tak targa targa_y216 text theora thp tiertexseqvideo tiff tmv truehd truemotion1 truemotion2 truespeech tscc tscc2 tta twinvq txd ulti utvideo v210 v210x v308 v408 v410 vb vble vc1 vc1_crystalhd vc1_vdpau vc1image vcr1 vima vmdaudio vmdvideo vmnc vorbis vp3 vp5 vp6 vp6a vp6f vp8 vplayer vqa wavpack webvtt wmalossless wmapro wmav1 wmav2 wmavoice wmv1 wmv2 wmv3 wmv3_crystalhd wmv3_vdpau wmv3image wnv1 ws_snd1 xan_dpcm xan_wc3 xan_wc4 xbin xbm xface xl xsub xwd y41p yop yuv4 zerocodec zlib zmbv CACHE STRING "Available decoders" FORCE)
	set( ENABLED_DECODERS theora flac vorbis CACHE STRING "Enabled audio and video decoders")
	
	if (MACOSX)
		set(OS_ARG "macosx")
	elseif(WINDOWS)
		set(OS_ARG "windows")
	elseif(LINUX)
		set(OS_ARG "linux")
	endif()
	
	if (MSVC)
		set(VS_ARG "vs")
	else()
		set(VS_ARG "novs")
	endif()
	
	if (MACOSX)
		set(ARCH_ARG ${CMAKE_OSX_ARCHITECTURES})
	else()
		set(ARCH_ARG notosx)
	endif()
	
	RunShell(${LIB_NAME} PRE_LINK ./build_ffmpeg.sh ${OS_ARG} ${VS_ARG} ${ARCH_ARG} ${ENABLED_DECODERS})
	
endif()

# Sample building
if (BUILD_SFEMOVIE_SAMPLE)
    add_subdirectory(sample)
endif ()

